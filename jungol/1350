import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.StringTokenizer;

public class jungol1350 {
	static BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
	public static void main(String[] args) throws IOException {
		StringTokenizer st=new StringTokenizer(br.readLine());
		int N=Integer.parseInt(st.nextToken());
		int M=Integer.parseInt(st.nextToken());
		parent=new int[N+1];
		rank=new int[N+1];
		for(int i=1;i<=N;i++) {
			makeSet(i);
			rank[i]=0;
		}
		List<Point> list=new ArrayList<Point>();
		for(int i=0;i<M;i++) {
			st=new StringTokenizer(br.readLine());
			int x=Integer.parseInt(st.nextToken());
			int y=Integer.parseInt(st.nextToken());
			int w=Integer.parseInt(st.nextToken());
			list.add(new Point(x, y, w));
		}
		Collections.sort(list, new Comparator<Point>() {

			@Override
			public int compare(Point o1, Point o2) {
				return Integer.compare(o1.w, o2.w)*-1;
			}
		});
		int cnt=0;
		int sum=0;
		for(int i=0;i<list.size();i++) {
			if(findSet(list.get(i).x)!=findSet(list.get(i).y)) {
				union(list.get(i).x, list.get(i).y);
				sum+=list.get(i).w;
				cnt++;
			}
			if(cnt==M-1)
				break;
		}
		System.out.println(sum);
	}
	static class Point{
		int x;
		int y;
		int w;
		public Point(int x, int y, int w) {
			this.x=x;
			this.y=y;
			this.w=w;
		}
	}
	static int[] parent;
    static int[] rank;
    static void makeSet(int x) {
        parent[x]=x;
    }
    static int findSet(int x) {
        if(parent[x]==x)
            return x;
        parent[x]=findSet(parent[x]);
        return parent[x];
    }
    static void union(int x,int y) {
        int px=findSet(x);
        int py=findSet(y);
        if(rank[px]>rank[py]) {
            parent[py]=px;
        }
        else {
            parent[px]=py;
            if(rank[px]==rank[py]) {
                rank[py]++;
            }
        }
    }
}
